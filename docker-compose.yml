version: '3.8'

services:
  # Redis for caching and queue management
  redis:
    image: redis:7-alpine
    container_name: financial-bpo-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for local S3-compatible storage (development only)
  minio:
    image: minio/minio:latest
    container_name: financial-bpo-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Mailhog for email testing (development only)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: financial-bpo-mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    
  # Bull Board for queue monitoring
  # This will be integrated into the API, exposed on separate port

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: financial-bpo-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    profiles:
      - tools

  # API Service
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: financial-bpo-api
    ports:
      - "3333:3333"
      - "3334:3334" # Bull Board UI
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - S3_ENDPOINT=http://minio:9000
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
    depends_on:
      - redis
      - minio
      - mailhog
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/api/node_modules
    command: npm run dev

  # Web Service
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: financial-bpo-web
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3333
    depends_on:
      - api
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/web/node_modules
      - /app/apps/web/.next
    command: npm run dev

volumes:
  redis_data:
  minio_data:

networks:
  default:
    name: financial-bpo-network